<page>
    <title>オペレーティングシステム</title>
    <ns>0</ns>
    <id>536</id>
    <revision>
      <id>94794989</id>
      <parentid>94005597</parentid>
      <timestamp>2023-04-15T14:03:35Z</timestamp>
      <contributor>
        <username>Mf Sticker</username>
        <id>1430349</id>
      </contributor>
      <comment>/* 概要 */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="69406" xml:space="preserve">{{複数の問題
|出典の明記=2021年5月
|更新=2021年5月
}}
{{OS}}
'''オペレーティングシステム'''（{{lang-en-short|operating system}}、略称:'''OS'''、オーエス）とは、[[コンピュータ]]のオペレーション（操作・運用・運転）を司る[[システムソフトウェア]]である。&lt;!--通常、OSメーカーが組み上げた[[プログラム (コンピュータ)|コンピュータプログラム]]の集合として、作成され提供されている。--&gt;&lt;!--純粋な「OSメーカー」ってかなり少なくないですか？　リアルタイムOS系には以前はいくつかありましたが、たいていはどこかに買収されていますし--&gt;

== 概要 ==
オペレーティングシステムは通常、ユーザーや[[アプリケーションソフトウェア|アプリケーション]][[プログラム (コンピュータ)|プログラム]]と[[ハードウェア]]の中間に位置し、ユーザーやアプリケーションプログラムに対して標準的な[[インタフェース (情報技術)|インタフェース]]を提供すると同時に、[[ハードウェア]]などの各リソースに対して効率的な管理を行う。現代のOSの主な機能は、[[ファイルシステム]]などの[[補助記憶装置]]管理、[[仮想記憶]]などの[[メモリ管理]]、[[マルチタスク]]などの[[プロセス管理]]、更には[[グラフィカルユーザインタフェース|GUI]]などの[[ユーザインタフェース]]、[[インターネット・プロトコル・スイート|TCP/IP]]などの[[コンピュータネットワーク|ネットワーク]]、などがある。[[パーソナルコンピュータ]]から[[スーパーコンピュータ]]までの各種のコンピュータや、[[スマートフォン]]や[[ゲーム機]]などを含む各種の[[組み込みシステム]]で、内部的に使用されている。

商品として（ないし製品として）のOSには、[[デスクトップ環境]]や[[ウィンドウシステム]]など、あるいは[[データベース管理システム]] (DBMS) などの[[ミドルウェア]]、ファイル管理ソフトウェアや[[エディタ]]や各種設定ツールなどのユーティリティ、[[ウェブブラウザ]]や時計などのアクセサリが、マーケティング上の理由などから一緒に含められていることもある。

;コンピュータのタイプごとの主なオペレーティングシステム
スマートフォンのOSおよびそのシェアは、2021年9月時点で[[Android (オペレーティングシステム)|Android]]が約72%、[[iOS]]が約27%である&lt;ref&gt;[https://gs.statcounter.com/os-market-share/mobile/worldwide]&lt;/ref&gt;。Androidは広い意味での[[Linux]]の一種であり、Linuxの[[カーネル]]を一部改編し他の[[オープンソース]]・ソフトウェアを組み合わせたものである。

[[ノートPC]]や[[デスクトップPC]]のOSおよびそのシェアは、2021年時点で[[Windows]] 75.4%、[[macOS]] 15.93%、[[ChromeOS]] 2.59%、[[Linux]] 2.33%となっている&lt;ref&gt;[https://gs.statcounter.com/os-market-share/desktop/worldwide/#monthly-202012-202012-bar]&lt;/ref&gt;。macOSは[[FreeBSD]]を基にした[[Unix系]]のOSである。

[[スーパーコンピュータ]]のOSは、2000年ころは[[UNIX]]が9割ほどを占めていたが、その後の10年間でそのほぼ全てがLinuxに置き換わり、2021年現在では世界のスーパーコンピュータのTOP500のほぼ100%が[[Linux]]である&lt;ref group="注"&gt;英語版の記事　[[:en:Usage share of operating systems#Supercomputers]]　にUNIXとLinuxのシェア入れ替わりのグラフが掲載されている。&lt;/ref&gt;。

組み込みシステムでは[[組み込みオペレーティングシステム]]と呼ばれるOSを用いる。小規模な組み込みシステムのなかには明確なOSを内蔵していないものもあるので曖昧な面もあるが、組み込みOSを搭載しているものに関しては2019年時点でのシェアでTRON（トロン）系がおよそ60%であり、24年連続トップを占める&lt;ref name="monoist"&gt;[https://monoist.itmedia.co.jp/mn/articles/2005/01/news072.html 組み込みOSのAPIはTRON系OSがシェア60％、24年連続トップ]&lt;/ref&gt;。TRON系のなかでも[[ITRON]]（アイトロン）が最も普及している&lt;ref name="monoist" /&gt;。TRON以外では、次いで[[POSIX]]系つまり[[UNIX系]]、[[Linux]]類などである&lt;ref name="monoist" /&gt;。米リナックスワークスの[[LynxOS]]（リンクスオーエス）、米ウィンドリバーの[[VxWorks]]（ヴイエックスワークスト）、米シンビアンの[[Symbian OS]]（シンビアン・オーエス）など。

{{See also|オペレーティングシステムの一覧|:en:Usage share of operating systems}}

== オペレーティングシステムの目的 ==
オペレーティングシステムの主な目的は、ハードウェアの抽象化、[[計算資源|リソース]]の管理、そしてコンピュータ利用効率の向上である&lt;ref&gt;{{Cite book| last = Stallings | title = Operating Systems, Internals and Design Principles | publisher = Prentice Hall | year = 2005 | location = Pearson |page=6}}&lt;/ref&gt;&lt;ref&gt;{{Cite book| last = Dhotre| first = I.A.| title = Operating Systems. | publisher = Technical Publications | year = 2009 |page=1}}&lt;/ref&gt;。
; ハードウェアの抽象化
: コンピュータごとに、製造元が異なるなどで、実現する機能は同じでも詳細な仕様に差異があるハードウェアが搭載されていることが多い。そのようなハードウェアの統一的で抽象化された利用方法を提供することで、[[アプリケーションソフトウェア]]の開発を容易にする。
; リソースの管理
: 複数のアプリケーションソフトウェアを同時に利用する際に、互いに独立して動作できるように資源を管理する。[[プログラム (コンピュータ)|プログラム]]からの資源要求に競合が起きた場合には、待たせる、エラーを返すなど、適切に対処する。
; コンピュータの利用効率の向上
: 複数の[[タスク]]を同時に実行する際に、資源割り当ての順番や処理の割り当て時間を工夫することで、全体の[[スループット]]を向上させる。これは[[デスクトップ環境]]ではあまり恩恵を感じることはないが、[[Webサーバ|ウェブサーバ]]や[[データベース]]など大量のアクセスをこなす用途などでは重要になる。

== オペレーティングシステムの機能とコンポーネント ==
=== APIとABI ===
{{Main|アプリケーションプログラミングインタフェース|アプリケーションバイナリインタフェース}}

オペレーティングシステムは[[アプリケーションソフトウェア]]を動作させるのが第一の目的である。このためのインタフェースが[[アプリケーションプログラミングインタフェース]] (API) と[[アプリケーションバイナリインタフェース]] (ABI) である。[[カーネル]]は[[システムコール]]によってアプリケーションにサービスを提供する。さらに基本[[ライブラリ]]も含めた形でアプリケーションに対してAPI/ABIを提供する。アプリケーションによってはオペレーティングシステム上の[[ミドルウェア]]や[[アプリケーションフレームワーク]]などをAPIとして使用する場合もある。

APIはプログラミングのためのインタフェースであり、プログラムを作成する際の規則を構成する。例えば、[[C言語]]での[[サブルーチン|関数]]や[[FORTRAN]]/[[Pascal]]などのライブラリ呼び出しの仕様といったものがそれにあたる。

一方、ABIは[[コンパイラ|コンパイル]]されたソフトウェアがオペレーティングシステムの機能を呼び出す際のインタフェースであり、プロセスが動作する際の規則を構成する。例えば、[[Unix系]]のオペレーティングシステムはAPIがほとんど共通だが、ABIはオペレーティングシステムによって異なる。したがって、同じ[[CPU]]を使ったシステムであっても、ABIが異なれば[[実行ファイル]]が異なる。ABIには、[[呼出規約]]、[[システムコール]]の方法などが含まれる。

なお、オペレーティングシステムの垣根を越えたABIもいくつか存在する。例えば、[[OCMP]] (Open Computing Environment for MIPS Platform) という[[MIPSアーキテクチャ|MIPS系]]チップを使用したUNIX機によるバイナリ共通インタフェースが[[日本電気]]や[[ソニー]]、[[住友電気工業]]、[[タンデムコンピューターズ|日本タンデムコンピューターズ]]などにより定義され、その定義に沿ったUNIXオペレーティングシステムが複数販売された。

=== カーネル ===
[[ファイル:Kernel Layout.svg|thumb|カーネルは、コンピュータのハードウェアとアプリケーションを結び付ける役目を担っている。]]
{{Main|カーネル}}
[[ファームウェア]]と[[デバイスドライバ]]の助けを借り、カーネルはコンピュータの全ハードウェアデバイスの基本的制御を提供する。[[Random Access Memory|RAM]]上のプログラムのメモリアクセスを管理し、どのプログラムがどのハードウェア資源へのアクセスを得るかを決定し、常に運用が最適化されるよう[[CPU]]の状態を設定し、[[ファイルシステム]]と共にディスク、磁気テープ、フラッシュメモリといった長期的[[不揮発性メモリ|不揮発性記憶装置]]でのデータの編成を行う。

==== プログラム実行 ====
{{Main|プロセス}}
オペレーティングシステムはアプリケーションプログラムとコンピュータハードウェアの間のインタフェースを提供し、オペレーティングシステムに組み込まれた規則や手続きに従うことによってアプリケーションプログラムはハードウェアとやりとりできる。オペレーティングシステムはまた、アプリケーションプログラムの開発と実行を簡素化するサービス群も提供する。アプリケーションプログラムの実行にあたって、オペレーティングシステムの[[カーネル]]がプロセスを生成する。プロセスの生成には、メモリ空間などの資源の割り当て、マルチタスクシステムでのプロセスへの優先度の割り当て、プログラムのバイナリコードのメモリへのロード、アプリケーションプログラムの実行開始といった仕事が含まれる。そうして初めてユーザーやハードウェアデバイスとやりとりを開始できる。

==== 割り込み ====
{{Main|割り込み (コンピュータ)}}
[[割り込み (コンピュータ)|割り込み]]はオペレーティングシステムの要であり、オペレーティングシステムが周囲の環境と相互作用し反応するための効率的手段となっている。非常に小さな[[コールスタック|スタック]]（50バイトや60バイト）しか持たない古いシステムでは、オペレーティングシステムが対応しなければならないイベントの発生源を「監視」するポーリング方式を採用していたが、現代の大きなスタックを持つシステムでは一般的ではない。現代の多くのCPUは、[[割り込み (コンピュータ)|割り込み]]をベースとしたプログラミングを直接サポートしている。割り込みが発生すると、その時点の[[コンテキストスイッチ|レジスタコンテキスト]]を退避し、そのイベントに対応した特定のコードを実行する。非常に基本的なコンピュータにもハードウェア割り込み機能があり、プログラマは特定の割り込みが発生したときに実行すべきコードを設定することができる。

割り込みを受信すると、コンピュータのハードウェアは実行中のプログラムを自動的に一時停止させ、状態を退避させ、その割り込みに事前に割り当てられているコードを実行する。これは例えば読書中に電話が鳴ったとき、本にしおりを挟み、電話に出るのに似ている。現代的なオペレーティングシステムでは、割り込みはオペレーティングシステムの[[カーネル]]が扱う。割り込みはコンピュータのハードウェアが発生させる場合もあるし、実行中のプログラムが発生させる場合もある。

ハードウェアから割り込みが発生した場合、オペレーティングシステムのカーネルがそのイベントにどう対応するかを一般に何らかの処理コードを実行して決定する。割り込みには優先順位があり、それに従って実行するコードが決定される。再び人間にたとえれば、電話が鳴ると同時に[[火災]]を知らせる[[火災報知器]]の[[非常ベル]]も鳴ったら、電話には出ずに避難するだろう。ハードウェア割り込みの処理は通常、[[デバイスドライバ]]と呼ばれるソフトウェアに委任される。デバイスドライバはオペレーティングシステムのカーネルの一部という場合もあるし、別のプログラムという場合もあるし、混在する場合もある。デバイスドライバは割り込みによって得た情報を各種手段を通じて動作中のプログラムに中継する。

実行中のプログラムがオペレーティングシステムに対して割り込みを発生させる場合もある。例えば、あるプログラムがハードウェアにアクセスしたい場合、オペレーティングシステムのカーネルに対して割り込みを発生させ、結果として制御をカーネルに移す。するとカーネルは必要な処理を行う。また、プログラムがメモリなどの資源を追加で要求する場合、割り込みを発生させてカーネルに知らせる。ただし、それらは一般に[[システムコール]]と呼ばれ、ハードウェア割り込みとは実装が異なることもある。

==== モード ====
{{Main|プロテクトモード|CPUモード|リングプロテクション}}
[[ファイル:Priv rings.svg|300px|thumb|right|[[x86]]の[[プロテクトモード]]では特権リングが利用可能である。オペレーティングシステムが各プロセスをどのモードで動作させるかを決定する。]]
現代的CPUには複数の運用モードがある。その場合、少なくともユーザーモードとスーパーバイザモードの2つが存在する。スーパーバイザモードはオペレーティングシステムのカーネルが使用するモードで、ハードウェアに無制限にアクセスでき、メモリの読み書きの方法を制御したり、グラフィックスカードなどのデバイスとやりとりしたりできる。一方ユーザーモードはカーネル以外のほぼ全てが使用する。アプリケーションはユーザーモードで動作し、ハードウェアとのやりとりはカーネルを通す必要がある。[[CPU]]は2つ以上のモードを持つこともあり、古いプロセッサをエミュレートするのに使ったりする。

コンピュータが起動した際は、自動的にスーパーバイザモードで動作する。[[Basic Input/Output System|BIOS]]や[[Unified Extensible Firmware Interface|EFI]]、[[ブート|ブートローダー]]、オペレーティングシステムのカーネルといったごく一部のプログラムがスーパーバイザモードで動作する。このようになっているのは、ユーザーモードの環境の初期化はその外側にあるプログラムでないと行えないためである。しかし、オペレーティングシステムが他のプログラムに制御を渡す際には、CPUをユーザーモードに設定できる。

ユーザーモードでは、プログラムが使用できるCPUの[[命令セット]]が制限されている。ユーザープログラムでユーザーモードを抜け出すには、割り込みを発生させ、[[カーネル]]に制御を戻す。そのようにしてハードウェアやメモリへのアクセスといったことへの独占的制御をオペレーティングシステムが保持している。

==== メモリ管理 ====
{{Main|メモリ管理}}

[[パーキンソンの法則]]によると、「メモリを拡張するとプログラムはそれに伴って拡大する」という。プログラマーは無限の容量と無限の速度のメモリを理想としている。コンピュータのメモリは階層構造になっていて、最も高速な[[レジスタ (コンピュータ)|レジスタ]]から、[[キャッシュメモリ]]、[[Random Access Memory|RAM]]、最も低速なディスク装置がある。オペレーティングシステム内のメモリ管理部はこのようなメモリを管理するもので、利用可能な部分、割り当てと解放、主記憶と二次記憶との間での[[仮想記憶|スワップ]]などを制御する。

マルチプログラミング・オペレーティングシステムの[[カーネル]]はプログラムが使用中の全システムメモリの管理責任を負っている。それによってあるプログラムが既に別のプログラムが使用しているメモリを誤って使用しないようにしている。プログラム群は時分割で動作するので、それぞれのプログラムの独立したメモリアクセスが可能となっている。

協調的メモリ管理は初期のオペレーティングシステムでよく使われた方式で、全プログラムが自発的に[[カーネル]]のメモリ管理機構を使い、割り当てられたメモリをはみ出さないように動作することを前提としている。プログラムにはバグがつきもので、そのために割り当てられたメモリからはみ出すこともあるため、このようなメモリ管理は今では見られない。プログラムが異常動作すると、他のプログラムが使用中のメモリを書き換えることもあった。悪意あるプログラムやウイルスが意図的に他のプログラムのメモリを書き換えたり、オペレーティングシステム自体の動作を妨げたりすることも可能である。協調的メモリ管理では、たった1つのプログラムがおかしな動作をするだけでシステム全体がクラッシュする。

[[カーネル]]による[[メモリ保護]]により、プロセスのメモリへのアクセスが制限される。メモリ保護には様々な技法があり、[[セグメント方式]]と[[ページング方式]]が代表的である。どの技法でも何らかのハードウェアサポートが必要であり（例えば、[[Intel 80286|80286]]の[[メモリ管理ユニット|MMU]]など）、あらゆるコンピュータがそのようなハードウェア機構を備えているわけではない。

セグメント方式でもページング方式でも、CPU内のユーザーがアクセスできないレジスタ群でユーザープログラムがアクセス可能なメモリアドレスの範囲を設定している。その範囲外のアドレスにアクセスしようとすると割り込みが発生してCPUがスーパーバイザモードに遷移し、[[カーネル]]がその状況に対処する。これを[[セグメンテーション違反]]と呼ぶ。セグメンテーション違反は一般にプログラムの間違いから発生するので、実行を継続するような対処は困難であり、[[カーネル]]は問題のプログラムを強制終了させ、エラーを報告するのが一般的である。

Windows 3.1からWindows Meまでは何らかのメモリ保護機構を備えていたものの、それを回避するのも容易だった。そのためセグメンテーション違反の発生を知らせる{{仮リンク|一般保護違反|en|general protection fault}}が考案されたが、それでもシステムがクラッシュすることが多かった。

==== 仮想記憶 ====
{{Main|仮想記憶}}
{{See also|ページフォールト}}
[[ファイル:Virtual memory.svg|thumb|250px|多くのオペレーティングシステムは、メモリ空間をハードディスクおよびRAM上にばらばらな形で確保してプログラムに対して連続にみせる「トリック」を使っている。これを「仮想記憶」と呼ぶ。]]

ページングやセグメントによる仮想記憶を使用することで、カーネルは任意の時点で各プログラムが使用するメモリを選択でき、同じメモリ位置を複数タスクで使用させることも可能となる。

あるプログラムが使用可能な現在のメモリ範囲だが物理メモリが割り当てられていない位置にアクセスしようとしたとき、セグメンテーション違反のように割り込みによってカーネルに遷移する。このような割り込みを[[Unix系]]では[[ページフォールト]]と呼ぶ。

カーネルがページフォールトを受け付けると、そのプログラムに割り当てられた仮想メモリ空間の調整を行い、要求されたメモリアクセスが可能になるよう物理メモリを割り当てる。これにより、カーネルはそれぞれのアプリケーションへのメモリ割り当てを自由に決定でき、さらには実際には割り当てないでおくことも可能となる。

現代的オペレーティングシステムでは、相対的にアクセス頻度が低いメモリを一時的にディスクなどの二次記憶装置に退避させ、主記憶を他のプログラムのために空けることができる。これを[[ページング方式|スワッピング]]と呼び、限られたメモリを複数のプログラムで使用可能にし、メモリの内容を必要に応じて退避させたり復帰させたりできる。

仮想記憶により、実際に搭載しているよりも多くのRAMを使用しているかのような感覚でコンピュータを使用することができる&lt;ref name="Operating System"&gt;{{Cite book|last=Stallings|first=William|title=Computer Organization &amp; Architecture|year=2008|publisher=Prentice-Hall of India Private Limited|location=New Delhi|isbn=978-81-203-2962-1|page=267}}&lt;/ref&gt;。

==== マルチタスク ====
{{Main|マルチタスク|プロセス管理}}
{{See also|コンテキストスイッチ|プリエンプション}}

コンピュータ上の各動作はバックグラウンドであっても一般の[[アプリケーションソフトウェア|アプリケーション]]であっても、内部的には[[プロセス]]として動作する。DOSのような機能の限定されたオペレーティングシステムは一度に1つのプロセスしか実行できない。近代的なオペレーティングシステムは一度に複数のプロセスを動作させることができる（[[マルチタスク]]）。プロセス管理は複数のプロセスを実行するためにオペレーティングシステムが行う処理である。プロセッサを1つだけ持つ一般的なコンピュータでは、マルチタスクは高速にプロセスからプロセスへ切り替えを行うことで実現される。ユーザーがより多くのプロセスを実行すれば、個々のプロセスに割り当てられる時間は少なくなっていく。多くのシステムでは、これが音声の途切れやマウスカーソルの奇妙な動作などを引き起こす。一般的なプロセス管理は、プロセスごとに優先度を与え、それによって配分される時間を決めている。

オペレーティングシステムの[[カーネル]]には[[スケジューリング|スケジューラ]]と呼ばれるソフトウェアが含まれており、プロセッサが実行すべきプロセスの順序と一度に実行する期間を決定している。スケジューラが選択したプロセスにカーネルが制御を渡し、それによってそのプログラムが[[CPU]]とメモリにアクセス可能になる。その後何らかの機構で制御がカーネルに戻され、スケジューラが再び新たなプロセスを選択する。このようなカーネルとアプリケーション間の制御の切り替えを[[コンテキストスイッチ]]と呼ぶ。

プログラム群へのCPU時間の割当方法の初期のモデルとして[[マルチタスク|協調的マルチタスク]]がある。このモデルでは、カーネルがあるプログラムに制御を渡すと、そのプログラムは時間を制限されることなく処理を行え、カーネルには自発的に制御を戻すことになっている。したがって、悪意あるプログラムやバグのあるプログラムがあると他のプログラムにCPU時間が割り当てられなくなり、[[無限ループ]]に陥っている場合はシステム全体がハングアップする。

[[プリエンプション|プリエンプティブ・マルチタスク]]では、動作中のプロセスから任意の時点で制御を奪うことができ、全プログラムに所定のCPU時間を割り当てることが可能である。これを実現するためオペレーティングシステムはタイマ割り込みを使用し、所定の時間が経過したら割り込みを発生させてスーパーバイザモードに制御を戻させ、カーネルがスケジューラを呼び出す。

現代的オペレーティングシステムでは、プリエンプションの考え方をユーザーモード（アプリケーション）だけでなくデバイスドライバやカーネルコードに対しても適用し、リアルタイム性を向上させている。

ホームコンピュータなどのシングルユーザー・オペレーティングシステムでは、少数のよく評価されたプログラムしか使わないことが多く、協調的マルチタスクで全く問題ない。例外として [[AmigaOS]] は初期のバージョンからプリエンプティブ・マルチタスクを実現していた。[[Microsoft Windows]] で初めてプリエンプティブ・マルチタスクを実装したのは [[Microsoft Windows NT|Windows NT]] だが、それが一般家庭向けに発売されるのは [[Microsoft Windows XP|Windows XP]] からだった。

==== ディスクアクセスとファイルシステム ====
{{Main|仮想ファイルシステム}}
[[ファイル:Dolphin FileManager.png|thumb|256px|ファイルシステムは、多くの場合ディレクトリ（フォルダ）を使ってファイル群を編成したり分類したりできる。]]

ディスクに格納したデータへのアクセスは、あらゆるオペレーティングシステムの中心的機能である。コンピュータは[[ファイル (コンピュータ)|ファイル]]という形で[[ハードディスクドライブ|ディスク]]にデータを格納する。ディスクの内容は高速アクセス、高信頼性、ディスク領域の利用効率などを考慮して編成される。このファイルをディスクに格納する方式を[[ファイルシステム]]と呼び、それによってファイルに名前と属性が付与される。また、[[ディレクトリ]]あるいはフォルダと呼ばれる構造を使い、ファイル群を階層構造（[[木構造 (データ構造)|木構造]]）内に格納できる。

初期のオペレーティングシステムは一種類のディスク装置しかサポートしておらず、ファイルシステムも一種類ということが多かった。初期のファイルシステムは容量や性能が低く、ファイル名やディレクトリ構造の面で制約が多かった。そういった制約はオペレーティングシステム自体の設計上の制約を反映していることが多く、複数のファイルシステムをサポートするのもオペレーティングシステムの制約の観点から非常に困難だった。

より単純なオペレーティングシステムではストレージへのアクセス手段が限られているが、[[UNIX]]や[[Linux]]などのオペレーティングシステムでは[[仮想ファイルシステム]] (VFS) という機構をサポートしている。UNIXなどのオペレーティングシステムは様々なストレージデバイスをサポートしており、それらの仕様や[[ファイルシステム]]とは独立した共通のアプリケーションプログラミングインタフェース (API) でアクセスできるようにしている。そのためプログラムはアクセスしようとしているデバイスに関する知識を持つ必要がない。VFS機構により、プログラムは[[デバイスドライバ]]とファイルシステムドライバを経由してシステム上のあらゆるデバイスと様々なファイルシステムにアクセス可能となる。

[[ハードディスクドライブ]]などの[[補助記憶装置]]には、[[デバイスドライバ]]を通してアクセスする。デバイスドライバは担当するデバイスのインタフェースをよく理解しており、それをオペレーティングシステムが全ディスクドライブに共通で用意しているインタフェースに変換する。UNIXでは、それが[[ブロックデバイス]]のインタフェースである。

===== 代表例 =====
Linuxを元プラットフォームとして開発されたものには[[ext2]]、[[ext3]]、[[ReiserFS]]などがある。また、他のプラットフォームから[[XFS]]、[[Journaled File System|JFS]]、[[File Allocation Table|FAT]]ファイルシステムなどが移植され、[[NT File System|NTFS]]も不十分ながら読み書きが可能である。

[[Macintosh]]ではまず最初にMacintosh File System (MFS) が実装されたが、ディレクトリ機能を備えていなかったためファイルブラウザ[[Finder]]でフォルダをエミュレーションしていた。その後[[Hierarchical File System]] (HFS) でディレクトリ機能を実装し、現在は改良を加えたHFS+が採用されている。現在[[macOS]]で読み書きが可能なものはHFS、HFS+、[[UNIX File System]] (UFS)、FATとなる。なおUFSの使用は一般でなく、FATへの対応は他プラットフォームとのデータ交換に用いられる。NTFSは読み込みのみが可能であり、書き込みについては[[Common Internet File System]] (CIFS) によるネットワークを介したものに限られる。

Windowsが標準で扱えるファイルシステムは、FAT、FAT32、NTFSである。[[Microsoft Windows NT|NT系のWindows]]ではNT3.51までは[[OS/2]]標準の[[HPFS]]にアクセス可能だった。現在Windows上ではNTFSが最も信頼性と効率が高いものとして一般的に利用される。FATは[[MS-DOS]]から採用される古いファイルシステムであるが、パーティションやファイルサイズに制限があり、大容量化したハードディスクではあまり用いられない。このためファイルサイズの制限をなくしたexFATが新たに開発された。なお、exFATはVistaや7では標準で使えるが、XPでexFATを使うためには専用のプログラムを新たにインストールする必要がある。

===== プラットフォーム間の差異 =====
FATはその仕様の制限から大容量のハードディスクには向かないが、その一方構造が単純で[[デジタルカメラ]]や[[携帯電話]]などの[[組み込みシステム]]向けを含むさまざまなオペレーティングシステムで読み書き可能なことから、各種[[メモリカード]]や[[USBフラッシュドライブ|USBメモリ]]などプラットフォームを跨ぐ用途においては主流である。なお、それら[[ソリッドステートドライブ|フラッシュディスク]]の大容量化に対応するため、マイクロソフトはFATを拡張した[[exFAT]]というファイルシステムを発表している&lt;ref&gt;{{Cite web|author=Microsoft Corporation|title=Extended FAT File System|url=http://msdn2.microsoft.com/en-us/library/aa914353.aspx|accessdate=2007年10月20日}}&lt;/ref&gt;。

MacintoshからWindows等へファイルを転送すると、転送先のWindows側に本体とは別のファイルが出現することがある。これはHFSやHFS+のみがサポートする[[リソースフォーク]]と呼ばれるデータ構造によるもので、Macintoshではそれらを一元的に管理を行うため一つの書類に見える。このように幾つものフォークを一つのデータに格納することをマルチフォークと呼び、もとのデータを改変することなくオペレーティングシステム独自の管理情報を容易に付与できる機能だが、実質的にMacintoshでしか利用できない。

===== 障害への対応 =====
ファイルシステムには、急な電源切断などによる障害へ対応する機構を持つものがある。
[[ジャーナルファイルシステム]]が最もよく採用される機構であり、その他にも[[ZFS]]のように書き込み操作を[[トランザクション]]として扱うものもある。これらを用いることで、障害復旧時のチェックを大幅に短縮する、または完全に不要にする。一方これらの機構を持たないファイルシステムでは、ファイルシステムの整合性を保つためストレージ全体を検査する必要がある。

==== デバイスドライバ ====
{{Main|デバイスドライバ}}

[[デバイスドライバ]]はハードウェアとのやり取りをするためのソフトウェアである。一般にハードウェアとの通信を行うインタフェースを持ち、ハードウェアの接続される何らかの通信サブシステムや[[バス (コンピュータ)|バス]]を経由して通信を行う。コマンドをハードウェアに送り、データの送受信を行う。また、一方でオペレーティングシステムやアプリケーションに対するインタフェースも提供する。ハードウェアに強く依存するプログラムであり、オペレーティングシステムにも依存している。これによって、オペレーティングシステムやアプリケーションがハードウェアを使って動作することが容易になっている。ハードウェアの非同期的な割り込みの処理もデバイスドライバの役割である。

デバイスドライバの主たる設計目標は[[抽象化]]である。ハードウェアは用途が同種のものであっても、機種によって動作や性能などがそれぞれ異なる。新たな機能や性能を提供するハードウェアが登場したとき、それらは従来とは異なった制御方式を採用していることが多い。オペレーティングシステムを将来にわたってあらゆるハードウェアを制御できるように設計するのは困難である。従って、個別のハードウェアの制御をオペレーティングシステムから切り離す必要がある。デバイスドライバはオペレーティングシステムとのインタフェース（関数呼び出し）をデバイス固有の処理に変換することが主たる機能となる。理論的には、新たな制御方法の新しいハードウェアが登場しても、そのハードウェア用のドライバが古いオペレーティングシステムに対応していれば、古いオペレーティングシステムでもドライバだけ置き換えればハードウェアを制御可能となる。

Vista以前のWindowsやバージョン2.6より以前のLinuxカーネルでは、ドライバ実行は協調的だった。すなわち、あるドライバが[[無限ループ]]に陥ると、システム全体がフリーズした。その後のバージョンでは[[プリエンプション]]が可能となり、カーネルがドライバを中断させることができるようになった。

=== ネットワーク ===
{{Main|コンピュータネットワーク}}

多くのオペレーティングシステムは[[インターネット・プロトコル・スイート|TCP/IP]]プロトコルをサポートしている。歴史的に見れば、初期のコンピュータネットワークは[[モデム]]を使って電話回線で行われていた（[[BSC手順]]など）。その後、[[パケット通信]]が使われるようになり、[[IBM]]の[[Systems Network Architecture|SNA]]などの各社独自のネットワークアーキテクチャが登場した。現在では、TCP/IPを中心とした通信が主流となっている。

[[通信プロトコル]]は、[[トランスポート層]]までは[[カーネル]]内モジュールとして実装し、[[プレゼンテーション層]]より上はシステムプロセスとして実装されるのが一般的である。[[セッション層]]の実装はシステムによって異なる。

このようなネットワーク機能により、異なるオペレーティングシステム間で[[コンピュータネットワーク|ネットワーク]]を形成し、計算能力 ([[遠隔手続き呼出し|RPC]])、ファイル、プリンター、スキャナーなどのリソースを共有できる。ネットワークにより、あるコンピュータのオペレーティングシステムが遠隔のコンピュータにあるリソースをあたかも自身に直接接続されているかのように透過的に利用できる。単純な通信に始まり、[[分散ファイルシステム]]、グラフィックスやサウンドといった機能の共有まで様々な応用がある。透過的アクセスの例としては、[[Secure Shell|SSH]]によるコマンドラインの直接使用などもある。

=== セキュリティ ===
{{Main|コンピュータセキュリティ}}

オペレーティングシステムが関係するセキュリティ機能は、ユーザーがリソースへの何らかのアクセスを行う際に前もって認証し、そのユーザーのアクセスレベルを決定し、管理者の方針に基づいてアクセスを制限することである。

オペレーティングシステムは、処理を許可すべき要求と処理すべきでない要求を識別できなければならない。一部のシステムは単にユーザー名などで要求者を識別し、それによって特権の有無を判断する。要求者を識別する過程を「[[認証]]」(authentication) と呼ぶ。ユーザー名を示さなければならないことが多く、ユーザー名に続いてパスワードも必要な場合がある。別の認証方法として、磁気カードや生体データを使った「認証」(certification) を行うこともある。ネットワーク経由に接続などの場合、認証を全く行わずにリソースにアクセスさせることもある（ネットワーク上で共有されたファイルを読む場合など）。

さらに高度なセキュリティを備えたシステムでは、監査証跡 (auditing) オプションも提供している。これは、リソースへのアクセス要求を監視し記録するものである（「このファイルは誰が読もうとしたか?」など）。プログラムが何らかのリソースを要求すれば割り込みによってカーネルに制御が渡るので、そこでセキュリティの確認が可能である。プログラムがハードウェアやリソースに直接アクセスできる場合、セキュリティは確保されない。

何者かがコンソールやネットワーク接続経由で[[ログイン]]しようとする際にもセキュリティの確保が必要である。このような要求は一般にデバイスドライバ経由でカーネルに渡され、それから必要ならアプリケーションに渡される。ログインにまつわるセキュリティは、企業や軍などで機密情報を保持しているコンピュータでは長年の課題だった。[[アメリカ国防総省]] (DoD) はセキュリティ評価に関する基本要件を定めた標準 ''[[オレンジブック (セキュリティ)|Trusted Computer System Evaluation Criteria]]'' (TCSEC) を策定した。TCSECはセキュリティを要求されるシステムの調達条件とされるようになったため、オペレーティングシステムのメーカーはこれを重視するようになった。

=== ユーザインタフェース ===
[[ファイル:Command line.png|thumb|256px|[[Bash|Bourne Again Shell]] のスクリーンショット。各コマンドは「プロンプト」の後に打ち込み、その下に結果が出力される。現在のプロンプトは画面最下端にある。]]
個人が使用するコンピュータには[[ユーザインタフェース]]が必要とされる。ユーザインタフェースは必ずしもオペレーティングシステムの一部とは限らない。通常は[[シェル]]などのプログラムが実装しているが、人間とのやりとりが必要なプログラムは基本的にユーザインタフェースを備えている。ユーザインタフェースは、[[キーボード (コンピュータ)|キーボード]]や[[マウス (コンピュータ)|マウス]]や[[クレジットカード]]読み取り機といった入力デバイスからのデータを取得するのにオペレーティングシステムを介する必要があり、[[ディスプレイ (コンピュータ)|モニター]]や[[プリンター]]といった出力機器にプロンプトやメッセージを出力するのにもオペレーティングシステムを介する必要がある。主なユーザインタフェースは、古くからある[[キャラクタユーザインタフェース]]（コマンドラインインタフェース）と視覚的な[[グラフィカルユーザインタフェース]]に大別される。

==== グラフィカルユーザインタフェース (''GUI'') ====
{{Main|グラフィカルユーザインタフェース}}
[[ファイル:KDE 4.png|thumb|left|256px|[[Plasma (KDE)|KDE Plasma Desktop]] というGUIのスクリーンショット。プログラムは画面上にグラフィカルに結果を表示し、ファイルやフォルダ（ディレクトリ）やアプリケーションはアイコンなどの形で表される。操作にはキーボードのほかにマウスも使われる。]]

最近のオペレーティングシステムは一般にGUIを持っている。多くの[[プロプライエタリソフトウェア|プロプライエタリ]]なシステム（[[Microsoft Windows|Windows]]や[[Mac OS]]）は[[カーネル]]とGUIが密接に関係している。他のオペレーティングシステムではユーザインタフェースはモジュール化されていて、任意のGUIをインストールしたり、新たなGUIを作成したりできる（[[Linux]]、[[FreeBSD]]、[[OpenSolaris]]）。

Windowsでは新たなバージョンが登場するたびにGUIを変更してきた。初期のWindowsから[[Microsoft Windows Vista|Windows Vista]]までを比べてみると、その変化は大きいし、MacintoshのGUIは1999年のMac OS Xの登場で劇的に変化した&lt;ref name="intro-date"&gt;Poisson, Ken. [http://www.islandnet.com/~kpolsson/compsoft/soft1998.htm "Chronology of Personal Computer Software"]. Retrieved on 2008-05-07. Last checked on 2009-03-30.&lt;/ref&gt;。

Macでは初期からSystem 6.0.xまでが[[モノクローム|白黒]]のGUIで、System 7以降も[[カラー]]化されたのみで、Mac OS 8でプラチナアピアランスが採用されても、Mac OS 9.2.2までは基本要素はほぼ変わらなかった。しかしMac OS Xになって完全に刷新され、[[Aqua (コンピュータ)|Aqua]]ベースのGUIになった。[[Mac OS X v10.3]]以降ではメタルアピアランスが導入され、その後もバージョンアップのたびに少しずつ手が加えられている。また、Aquaとは別に[[X11]]も用意されている。

Mac OS Xの前身の[[NEXTSTEP]]は様々な独創的なGUI要素で知られ、他のオペレーティングシステムや[[デスクトップ環境]]に大きな影響を与えた。[[グレースケール]]のシステムだったころより[[アルファチャンネル]]を備えていたのは特筆すべき点である。

LinuxではGUIを提供するデスクトップ環境がいくつか存在する。Linuxで使えるGUIとして有名なものは、[[GNOME]]と[[KDE]]がある。


== オペレーティングシステムの歴史 ==
{{Main|オペレーティングシステムの歴史|en:Timeline of operating systems}}
=== 1950年代 オペレーティングシステム前史===
[[1950年代]]、オペレーティングシステムという概念が登場し始めた。初期のコンピュータはオペレーティングシステムを持たなかった。しかし、システム管理用ソフトウェアツールやハードウェアの使用を簡素化するツールはすぐに出現し、徐々にその利用範囲を拡大していった。最初のオペレーティングシステムは、[[IBM 701]]用に[[ゼネラルモーターズ]]が開発したもの、[[IBM 704]]用にゼネラルモーターズと[[ノースアメリカン航空]]が共同開発したもの等、多くの候補があるが、どういった機能が搭載された時点でオペレーティングシステムと呼ぶかによる。この時代のものをオペレーティングシステムとは呼ばない場合もある&lt;ref name="google4"&gt;{{Cite book|title= Classic Operating Systems|editor1-first= Per Brinch|editor1-last= Hansen|year= 2001|publisher= Springer|location= |isbn= 0-387-95113-X|pages=4–7|url= https://books.google.co.jp/books?id=-PDPBvIPYBkC&amp;lpg=PP1&amp;pg=PP1&amp;redir_esc=y&amp;hl=ja#v=onepage&amp;q}}&lt;/ref&gt;。

当時は、[[パンチカード]]等から入力された[[プログラム (コンピュータ)|プログラム]]を[[磁気テープ]]に一旦保存し、その磁気テープを大型コンピュータに接続後、プログラムをロードして実行していた。そのため、入出力装置のドライバに当たるものが作成されていた。また、[[アセンブリ言語|アセンブラ]]や[[コンパイラ]]が登場し始めた時代なので、まずコンパイラをロードしてからプログラム（ソースコード）をロードし、コンパイル結果として出力された[[アセンブリ言語]]をアセンブルするために、さらにアセンブラをロードするといった手続きが必要だった。こうした作業を自動化する'''[[バッチ処理]]'''がオペレーティングシステムの機能として実現されていた。また、プロセスの状態を監視するモニタも実装されていた。

=== 1960年代 オペレーティングシステムの確立 ===
[[1960年代]]前半には、オペレーティングシステム機能の増強が進められた。[[スプーリング|スプール]]、[[ジョブ]]管理、[[メモリ保護|記憶保護]]、[[マルチプログラミング]]、[[タイムシェアリングシステム]]、そして、[[仮想記憶]]の概念が登場し始めた。これらの概念を複数搭載するオペレーティングシステムも登場していた。また、[[マルチプロセッシング]]システムに対応するオペレーティングシステムもあった。

1960年代後半には、オペレーティングシステムは著しい進化を遂げた。現在のオペレーティングシステムの概念や基本部分（カーネル）の技術の大半は、この時期に完成された。

1962年、[[ゼネラル・エレクトリック]]がGECOS（後の[[GCOS]]）の開発を開始した。

[[ファイル:IBM360-65-1.corestore.jpg|thumb|[[OS/360]]は1966年からIBMの[[メインフレーム]]で使われ始め、NASAが月に人間を送り込むことにも使われた。]]
[[1964年]]発表のIBM [[System/360]]シリーズに搭載された[[OS/360]]および[[DOS/360]]は世界初の商用オペレーティングシステムとされ、単一の'''OSシリーズ'''で幅広いモデル（性能、容量、価格帯）と周辺機器を稼働させ、更に[[ハードディスクドライブ]]をサポートし、本格的な（[[プリエンプション|プリエンプティブ]]な）'''[[マルチタスク]]'''を実現した。「オペレーティングシステム」という用語が一般化したのもOS/360からである。従来は機種ごとに専用の制御ソフトが付属し「機種が変わればプログラムは書き直し、周辺機器は買い直し」が常識だったが、オペレーティングシステムがアプリケーションに一貫した上位互換の[[アプリケーションプログラミングインタフェース|API]]を提供する事で、OS/360用に書かれたプログラムは、40年以上経過した現在の[[z/OS]]上でもバイナリ互換で動作する。このOS/360はNASAが使っていた

この頃のもう1つの重要な進歩として'''[[タイムシェアリングシステム]]'''の本格的な実用化がある。コンピュータの資源を複数のユーザーが並行的に使えるようにすることで、システムを有効利用するものである。タイムシェアリングは、各ユーザーに高価なマシンを独占しているかのような幻想を抱かせた。[[1965年]]の[[Multics]]のタイムシェアリングシステムは特に有名である。更に[[1967年]]にはSystem/360用に、商用初の'''[[仮想機械|仮想化オペレーティングシステム（仮想機械）]]'''である[[z/VM|CP-40とCP-67]]が登場し、1台のコンピュータで同時に複数のオペレーティングシステムを稼働できるようになったが、これもタイムシェアリングの応用である。

また'''[[仮想記憶]]'''は[[1961年]]の[[バロース B5000]]が商用初とされ、[[1970年]]のIBM [[System/370]]シリーズ用の[[OS/VS]]で広く普及した。コンピュータの利用形態として[[オンライントランザクション処理]]や[[データベース]]処理が普及したのもこの頃である。

=== 1970年代 - 1980年代前半 分散システムの台頭 ===
[[1970年代]] - [[1980年代]]前半は、多種多様な[[分散システム]]が普及した。[[ミニコンピュータ]]用オペレーティングシステムとしては、[[OpenVMS|VMS]]が有名である。Multicsは1970年代の様々なオペレーティングシステム、[[UNIX]]などに影響を与えた。UNIXは[[オープンシステム (コンピュータ)|オープンシステム]]と呼ばれ、ミニコンピュータからメインフレームまで広く普及した。

[[ファイル:PC DOS 1.10 screenshot.png|thumb|256px|[[IBM PC DOS|PC-DOS]] は、初期のコマンドラインインタフェースを持つパーソナルコンピュータ用オペレーティングシステムである。]]
また1970年代には低価格な[[マイクロプロセッサ]]が登場したが、初期の[[パーソナルコンピュータ|マイクロコンピュータ]]は、メインフレームやミニコンピュータのような大規模なオペレーティングシステムを搭載する容量もなかったため、ディスク管理程度の必要最低限の機能しか持たないオペレーティングシステムが開発された。初期の特筆すべきオペレーティングシステムとして[[CP/M]]があり、[[8ビット]]のマイクロコンピュータで良く使われた。その大雑把なクローン（複製）として[[16ビット]]の[[IBM PC]]用にPC DOSが生まれ、そのOEM版である[[MS-DOS]]が普及した。これらはオペレーティングシステムの提供する機能が少なく、画面制御など多くの機能は、アプリケーションが直接ハードウェアを操作する必要があったため、同じ[[CPU]]を使用していても、[[ハードウェア]]（機種）が異なると[[互換性]]も失われた。このMS-DOSと後継の[[Microsoft Windows]]によって、[[マイクロソフト]]は世界有数のソフトウェア企業となった。

なお、1980年代の別の特筆すべき流れとして、[[グラフィカルユーザインタフェース|GUI]]を標準装備したApple Computer（現:[[Apple]]）のMacintoshがある。Macintoshのオペレーティングシステム (Mac OS) は、当時の性能的制約から、多くの部分が[[ファームウェア]]の状態でハードウェアに組み込まれてはいたが、現在でいう[[ウィジェット・ツールキット]]を含むToolboxと呼ばれるAPI群を持ち、アプリケーションにおけるGUIのデザイン開発をある程度まで標準化した。

マイクロプロセッサの高性能化と低価格化が進むと、業務用途のシステムでは、高機能な[[端末]]を大量に用意することが可能になり、UNIXをベースとした[[クライアントサーバモデル]]が普及した。クライアント機である[[ワークステーション]]のオペレーティングシステムとして[[SunOS]]、[[IBM AIX]]、[[IRIX]]などのUnix系オペレーティングシステムが用いられた。この時期には[[ソフトウェアの肥大化|肥大化]]したUNIXの再設計の機運が高まり、[[マイクロカーネル]]という新しい設計手法が生まれ、成果として[[Mach]]などのカーネルが作られた。しかし、UNIXの権利を持つAT&amp;Tがライセンスに厳しい条件をつけるようになり、UNIXを自由に改変したり、改変した機能を外部に公開することができなくなった。このため、オープンシステムとしてのUNIXのオープンな文化は一時衰退に追い込まれた。さらにUNIXの標準規格を巡って[[UNIX戦争]]が勃発し、UNIX市場は大きなダメージを受けた。

=== 1980年代後半-2000年代初頭 次世代オペレーティングシステムへの流れ ===
1980年代後半には、[[パソコン]]にも[[32ビット]]時代が到来し、[[1990年代]]に入ると、低価格なAT互換機でも[[記憶装置|メモリ]]を十分に搭載すれば[[PC-UNIX]]の利用が可能になりはじめた。当時のパソコンでは、オペレーティングシステムとして最低限の機能しか持たないDOSが依然として使われており、GUIやネットワーク、[[マルチメディア]]に対応させるため、[[ベンダー|ベンダ]]がDOSを様々な形で拡張した[[システムソフトウェア]]や、[[ウィンドウシステム]]を搭載するようにもなったが、これは互換性や信頼性など様々な点で問題を発生させていた。こうした問題を解決するため、堅牢な（[[プリエンプション|プリエンプティブ]]な）[[マルチタスク]]機能、高度なネットワーク機能など、従来のUNIX(互換)[[ワークステーション]]並みの機能がパソコンにも求められるようになってきた。さらに、肥大化したソフトウェア開発の効率を改善するために[[オブジェクト指向]]APIを導入し、Macintoshのように標準化されたGUIを備えることも求められた。これらの機能を備えたオペレーティングシステムは「次世代オペレーティングシステム」、「モダン・オペレーティングシステム」などと呼ばれた。

[[1987年]]には[[IBM]]と[[マイクロソフト]]が、[[パーソナルコンピュータ]]用に堅牢なマルチタスク機能・GUI（同年末の1.1より）・ネットワーク機能（拡張版）を装備した[[OS/2]]を発表した。[[1988年]]に登場した[[NEXTSTEP]]は、業務用途に耐える堅牢性・全面的なオブジェクト指向導入による柔軟性・高度な[[グラフィック]]機能・一貫したGUIといった、新世代の[[デスクトップ環境|デスクトップ]]オペレーティングシステムで求められる機能を全て実現した。しかしこれらは当時の[[ハードウェア]]性能では[[負荷]]が大きかったため広くは普及せず、代わりに、軽量だが堅牢なメモリ管理やマルチタスク機能は持たないMac OSや、[[Microsoft Windows 3.x|Windows 3.x]] などのGUI環境が徐々に普及していった。これらは当時の限られたハードウェアでも快適に動作したが、安定性や機能では劣っていた。

UNIX（互換）系オペレーティングシステムの流れでは、UNIXの権利を持つAT&amp;T（1992年からはノベル）がソースコードの自由な改変を禁じていたことから、オープンソースのUNIX互換オペレーティングシステムが開発されはじめる。[[1990年]]に[[GNU Hurd|Hurd]]の開発が開始され、[[1991年]]に、[[Linux]]が[[フリーソフトウェア]]として公開された。マイクロカーネルなどの新しい設計手法を採用し、トレンドに合わせたびたび設計が変更されたHurdの開発が停滞する一方、Linuxは保守的な設計と[[バザール方式]]という不特定多数の担い手による開発手法を採用し、迅速な開発が進められ、PC-UNIXのデファクトスタンダードとなった。ただしLinuxはオペレーティングシステムの心臓部であるカーネルのみのため、カーネル以外のオペレーティングシステムを構成するソフトウェアを揃えて自ら環境を整える必要があり、初期段階においては技術者などのごく一部の人たちにのみ使われていた。[[386BSD]]を皮切りにフリーの[[BSDの子孫|BSD系]]UNIXも登場したが、UNIXの権利者だったノベルと[[Berkeley Software Distribution|BSD]]を開発した[[カリフォルニア大学バークレー校]]との訴訟に巻き込まれ、開発中止を余儀なくされた（1994年から[[FreeBSD]]と[[NetBSD]]の開発が再開される）。

[[1994年]]には、[[Microsoft Windows|Windows]]としては初めて、[[32ビット]]に本格対応（カーネルの32ビット化）し、堅牢なマルチタスク機能を備えた[[Microsoft Windows NT|Windows NT]]が登場した。ただこれも負荷や[[互換性]]の問題などから個人用途にはあまり普及せず、かわって急速に普及したのは[[Microsoft Windows 3.x|Windows 3.x]]を拡張しつつ、Windows NTの機能を限定的に取り入れた[[Windows 95]]であった。以降、Windows NT系と[[Windows 9x系]]との並存が続き、WindowsがWindows NTベースに一本化されたのは[[2001年]]の[[Microsoft Windows XP|Windows XP]]からである。

また、Appleも同年、NEXTSTEPを発展させたMac OS Xを新たにリリース、従来の Mac OS の後継となった。このころには低価格なパーソナルコンピュータでも、これらのオペレーティングシステムの負荷を問題としないほどに高性能化しており、オープンで低価格な[[分散コンピューティング]]を広めた（[[ダウンサイジング]]）。

=== 2000年代中盤 オペレーティングシステムの多様化 ===
[[2003年]]にはパソコンにも[[64ビット]]時代が到来し、オペレーティングシステムも64ビット化が進んだが、16ビット化や32ビット化の際と比較するとオペレーティングシステムの機能や役割に大きな変化はなかった。商用のパソコン用オペレーティングシステムのWindowsとMac OS Xのいずれもが64ビットへの移行を徐々に進めていった。Windowsは同一バージョンのオペレーティングシステムで32ビット版と64ビット版の双方を提供して、Mac OS Xは32ビット[[カーネル]]を維持したまま、一般プロセスに64ビット機能を持たせる道を選んだ。2000年代中頃まではパソコンの性能向上が著しかったため、デスクトップ用途の新しいオペレーティングシステムは同時代における高性能なパソコンを必要としていたが、[[2006年]]を境にしてCPUの性能向上の限界が顕著に現れ始めると、高効率化を目指した開発にシフト。[[Microsoft Windows Vista|Windows Vista]]・[[Microsoft Windows 7|Windows 7]]やmacOSなどの新しいオペレーティングシステムにおいて、高機能の[[マルチコア]]CPUや[[プログラマブルシェーダ]]を搭載した[[Graphics Processing Unit|ビデオチップ]]への対応が進められた。

[[オープンソース]]の流れでは、従来より[[GNU]]が[[UNIX]]向けのツール群を開発していたが、これらを[[Linuxカーネル]]と組み合わせた[[GNU/Linux]]が、[[2000年]]頃より[[Unix系]]オペレーティングシステムの主流となった。またBSD系オペレーティングシステムもUnix系オペレーティングシステムの[[市場占有率|シェア]]の大きな部分を占めている。

一方、[[組み込みシステム]]にもより複雑な機能が求められるようになり、[[NetBSD]]、[[VxWorks]]、[[LynxOS]]、[[QNX]]、[[Enea OSE]]、[[Symbian OS]]など汎用オペレーティングシステムをベースとし[[リアルタイムオペレーティングシステム|リアルタイム性能]]を持たせた[[組み込みオペレーティングシステム]]が幅広い用途に使われている、中でもオープンソースの[[TOPPERS]]の[[ITRON]]を含むTRON系オペレーティングシステム・APIが、2020年現在、組み込みオペレーティングシステムの60%のシェアを持っている&lt;ref name="tron_forum"&gt;{{Cite web| url=https://www.tron.org/ja/2020/04/post-5172/ |title=組込みシステムに組み込んだOSのAPIで TRON系OSが60%のシェアを達成し24年連続の利用実績トップ 2020年4月2日 | publisher=トロンフォーラム |accessdate=2020-09-22}}&lt;/ref&gt;。

[[1990年代]]以降は[[ダウンサイジング]]の流れにより、業務用途でもオープンシステムやWindowsへと主流が移行している中、信頼性・[[可用性]]を重視する用途には、現在でも専用オペレーティングシステム（[[z/OS]]、[[OSIV/MSP|MSP]]/[[OSIV/XSP|XSP]]、[[VOS3]]、[[Advanced Comprehensive Operating System|ACOS]]など）を搭載したメインフレームが採用され、使い分けられている。

=== 2010年代 ユビキタス時代へ ===
[[2000年]]代末以降、パーソナルコンピュータ市場が成熟化する一方で、[[スマートフォン]]や[[タブレット (コンピュータ)|タブレット]]に代表される、デスクトップ・オペレーティングシステムから派生した組み込みプラットフォームが普及し、[[ユビキタスコンピューティング|モバイルコンピューティング]]が一般化した。

これらは[[カメラ]]、[[グローバル・ポジショニング・システム|GPS]]、[[加速度センサー]]、[[ジャイロスコープ]]、[[無線LAN]]、[[Bluetooth]]、狭い画面に最適化された[[タッチパネル]]などのインタフェースを組み込み、[[携帯機器]]の低消費電力の要求に応えた[[iOS]]、[[Android (オペレーティングシステム)|Android]]などの[[モバイルオペレーティングシステム|モバイルプラットフォーム]]を採用している。
&lt;!--古いデータ
*2016年12月デスクトップOSシェア：Windows系 91.7%、Mac 6.1%、Linux 2.2% (NetApplications調査)&lt;ref&gt;[https://news.mynavi.jp/techplus/article/20170103-a043/ Windows 7/10/XPが増加 - 12月OSシェア - マイナビニュース]&lt;/ref&gt;。
*2015年タブレットOS別国内シェア：iOS 39.2%、Android 35.7%、Windows 25.1% (IDC Japan調査)&lt;ref&gt;[http://www.idcjapan.co.jp/Press/Current/20160405Apr.html 2015年 国内法人向けタブレット市場 OS別シェアを発表 - IDC Japan]&lt;/ref&gt;
*2015年スマートフォンOS別国内シェア：iOS が 52.4% (IDC Japan調査)&lt;ref&gt;[https://corriente.top/ios-share-japan/ 国内のスマホのOSシェアを調査！iOSのシェアは6.3ポイント低下 - corriente.top]&lt;/ref&gt;
*2011年サーバーOS国内シェア(金額ベース)：Windows 47%、[[メインフレーム]] 20%、Linux 17%、UNIX 13% (IDC Japan調査)&lt;ref&gt;[http://www.keyman.or.jp/at/30005136/ 国内サーバオペレーティングシステム市場 稼働環境別売上額実績 - IDC Japan]&lt;/ref&gt;, 2018年 Windows 52%, Linux 24.8%, &lt;ref&gt;[https://www.idcjapan.co.jp/Press/Current/20180821Apr.html 国内サーバーオペレーティングシステム市場予測を発表,2018年8月21日, IDC Japan株式会社]&lt;/ref&gt;
--&gt;

== オペレーティングシステムの分類 ==
=== タスク管理の特徴 ===
* [[マルチタスク]]
* [[シングルタスク]]
* [[リアルタイムオペレーティングシステム]]

=== 応用分野 ===
* [[サーバオペレーティングシステム|サーバ]]（サーバ向け）
* [[デスクトップオペレーティングシステム|デスクトップ]]（パソコン、ワークステーション向け）
* [[モバイルオペレーティングシステム|モバイル]]（PDA、スマートフォン向け）
* [[組み込みオペレーティングシステム|組み込み]]（組み込みシステム向け）

== 脚注 ==
{{脚注ヘルプ}}
=== 注釈 ===
{{Notelist2}}
=== 出典 ===
{{Reflist|colwidth=30em}}

== 参考文献 ==
{{Refbegin}}
* {{Cite journal| last =Auslander | first =Marc A.| coauthors = Larkin, David C.; Scherr, Allan L.| title = The evolution of the MVS Operating System | publisher = IBM J. Research &amp; Development | year=1981 }}
* {{Cite book| last = Deitel | first = Harvey M. | coauthors = Deitel, Paul; Choffnes, David | title = Operating Systems | publisher = Pearson/Prentice Hall | year = | isbn = 978-0-13-092641-8 }}
* {{Cite book| last = Bic| first = Lubomur F. | coauthors = Shaw, Alan C. | title = Operating Systems | publisher = Prentice Hall | year = 2003 | location = Pearson  }}
* {{Cite book| last = Silberschatz | first = Avi | coauthors = Galvin, Peter; Gagne, Greg | title = Operating Systems Concepts | publisher = John Wiley &amp; Sons | year = 2008 | isbn = 0-470-12872-0 }}
{{Refend}}

== 関連項目 ==
{{ウィキポータルリンク|オペレーティングシステム|[[ファイル:Alternative virtual machine host.svg|36px|ウィキポータル オペレーティングシステム]]}}
* [[オペレーティングシステムの一覧]]
* [[ハードウェア]]
* [[ソフトウェア]]
* [[動作環境]]
* [[デスクトップ環境]]
* [[ハイパーバイザ]]
* [[ネットワークオペレーティングシステム]]
* [[Live CD]]
* [[システムイメージ]]
* [[人工意識]]
* [[マルチユーザー]]
* [[マルチタスク]]
* [[デバイスドライバ]]
* [[スプーリング]]

== 外部リンク ==
{{Commons category|Screenshots by operating system|OSのスクリーンショット}}
* {{コトバンク}}
* [http://www.cbi.umn.edu/iterations/haigh.html the history of operating systems]

{{オペレーティングシステム}}
{{コンピュータ科学}}
{{Systems science}}

{{Normdaten}}
{{DEFAULTSORT:おへれえていんくしすてむ}}
[[Category:オペレーティングシステム|*]]
[[Category:ソフトウェア]]
[[Category:コンピュータの仕組み]]</text>
      <sha1>bfr68xho9oe08blq9jbut2utgxz8dtr</sha1>
    </revision>
  </page>
  